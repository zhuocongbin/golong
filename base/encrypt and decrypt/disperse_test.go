

package algorithm

import (
	"fmt"
	"testing"
)

func TestOnceDisperse(t *testing.T) {
	dis := NewDisperser()
	d := Test{
		Key:  []byte{0xF6, 0xCB, 0x98, 0x6B, 0x22, 0xC8, 0xDC, 0x43, 0x87, 0xF3, 0x6B, 0xF0, 0xA7, 0xA0, 0x28, 0x03},
		Data: []byte{0xB9, 0x80, 0x29, 0x39, 0x8B, 0x4F, 0x41, 0x08},
		Want: []byte{0x42, 0xB3, 0x13, 0x4D, 0x6B, 0xB5, 0xC9, 0x07, 0x47, 0x2D, 0x6C, 0xF6, 0xF7, 0x42, 0x51, 0x15},
	}
	res, err := dis.OnceDisperse(d.Key, d.Data)
	if err != nil {
		t.Error(err.Error())
	}
	src := fmt.Sprintf("%X", res)
	dst := fmt.Sprintf("%X", d.Want)
	if src != dst {
		t.Errorf("failed res(%s) expect(%s)\n", src, dst)
	}
}

func TestTwoTimesDisperse(t *testing.T) {
	dis := NewDisperser()
	d := Test{
		Key:  []byte{0xF6, 0xCB, 0x98, 0x6B, 0x22, 0xC8, 0xDC, 0x43, 0x87, 0xF3, 0x6B, 0xF0, 0xA7, 0xA0, 0x28, 0x03},
		Data: []byte{0xB9, 0x80, 0x29, 0x39, 0x8B, 0x4F, 0x41, 0x08, 0x46, 0x7F, 0xD6, 0xC6, 0x74, 0xB0, 0xBE, 0xF7},
		Want: []byte{0x1C, 0x5D, 0xE4, 0x1A, 0x6F, 0xAF, 0x02, 0x9F, 0xA1, 0x8A, 0x93, 0x86, 0x4B, 0x09, 0x33, 0xA9},
	}
	res, err := dis.TwoTimesDisperse(d.Key, d.Data)
	if err != nil {
		t.Error(err.Error())
	}
	src := fmt.Sprintf("%X", res)
	dst := fmt.Sprintf("%X", d.Want)
	if src != dst {
		t.Errorf("failed res(%s) expect(%s)\n", src, dst)
	}
}

func TestThreeTimesDisperse(t *testing.T) {
	dis := NewDisperser()
	d := Test{
		Key:  []byte{0xF6, 0xCB, 0x98, 0x6B, 0x22, 0xC8, 0xDC, 0x43, 0x87, 0xF3, 0x6B, 0xF0, 0xA7, 0xA0, 0x28, 0x03},
		Data: []byte{0xB9, 0x80, 0x29, 0x39, 0x8B, 0x4F, 0x41, 0x08, 0x46, 0x7F, 0xD6, 0xC6, 0x74, 0xB0, 0xBE, 0xF7, 0xD0, 0x48, 0xFC, 0xD1, 0x4C, 0x22, 0x15, 0x5F},
		Want: []byte{0xC7, 0x78, 0x5E, 0x00, 0x6A, 0x7F, 0xB5, 0x70, 0xA1, 0x46, 0x12, 0x0F, 0x69, 0x6C, 0x59, 0xA7},
	}
	res, err := dis.ThreeTimesDisperse(d.Key, d.Data)
	if err != nil {
		t.Error(err.Error())
	}
	src := fmt.Sprintf("%X", res)
	dst := fmt.Sprintf("%X", d.Want)
	if src != dst {
		t.Errorf("failed res(%s) expect(%s)\n", src, dst)
	}
}
