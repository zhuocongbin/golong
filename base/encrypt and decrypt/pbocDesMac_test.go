
package algorithm

import (
	"fmt"
	"testing"
)

func TestPBOCCalculateMAC(t *testing.T) {
	c := NewPbocDesCalculateMAC()
	d := Test{
		Key:  []byte{0x6F, 0x71, 0x5F, 0xB2, 0x8C, 0x52, 0x33, 0x14},
		Data: []byte{0x00, 0x00, 0x00, 0x0A, 0x06, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x00, 0x00, 0x00, 0x1D, 0x20, 0x15, 0x04, 0x14, 0x19, 0x43, 0x00},
		Want: []byte{0x27, 0xCF, 0x46, 0xD9, 0x3A, 0x1C, 0x31, 0x8B},
	}
	iv := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	res, err := c.CalculateMAC(d.Key, d.Data, iv)
	if err != nil {
		t.Error("failed:" + err.Error())
	}
	src := fmt.Sprintf("%X", res)
	dst := fmt.Sprintf("%X", d.Want)
	if src != dst {
		t.Errorf("failed res(%s) expect(%s)n", src, dst)
	}
}

func TestPBOC3DESCalculateMAC(t *testing.T) {
	c := NewPboc3DesCalculateMAC()
	d := Test{
		Key:  []byte{0x57, 0xE0, 0x90, 0x59, 0x25, 0x3A, 0xDC, 0x76, 0xDC, 0x01, 0x55, 0x43, 0x78, 0x1E, 0x00, 0x6A},
		Data: []byte{0x00, 0x00, 0xBC, 0xAB, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00},
		Want: []byte{0x4B, 0xA9, 0x58, 0xD1, 0x78, 0x98, 0xB2, 0x1D},
	}
	iv := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	res, err := c.CalculateMAC(d.Key, d.Data, iv)
	if err != nil {
		t.Error("failed:" + err.Error())
	}
	src := fmt.Sprintf("%X", res)
	dst := fmt.Sprintf("%X", d.Want)
	if src != dst {
		t.Errorf("failed res(%s) expect(%s)\n", src, dst)
	}
}

func TestANSIX99CalculateMAC(t *testing.T) {
	c := NewANSIx99CalculateMAC()
	d := Test{
		Key:  []byte{0x57, 0xE0, 0x90, 0x59, 0x25, 0x3A, 0xDC, 0x76},
		Data: []byte{0x00, 0x00, 0xBC, 0xAB, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00},
		Want: []byte{0xC4, 0xB0, 0x1A, 0x03, 0x24, 0xD8, 0x49, 0xA6},
	}
	iv := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	res, err := c.CalculateMAC(d.Key, d.Data, iv)
	if err != nil {
		t.Error("failed:" + err.Error())
	}
	src := fmt.Sprintf("%X", res)
	dst := fmt.Sprintf("%X", d.Want)
	if src != dst {
		t.Errorf("failed res(%s) expect(%s)\n", src, dst)
	}
}

func TestUnionPayCalculateMAC(t *testing.T) {
	c := NewUnionPayCalculateMAC()
	d := Test{
		Key:  []byte{0x45, 0xDD, 0x04, 0x31, 0x7A, 0x52, 0xF6, 0x9B, 0x45, 0xDD, 0x04, 0x31, 0x7A, 0x52, 0xF6, 0x9B},
		Data: []byte{0x12, 0x34, 0x56, 0x78, 0x90, 0x09, 0x87, 0x65, 0x43, 0x21, 0x12, 0x34, 0x56, 0x78, 0x90, 0x09, 0x87, 0x65, 0x43, 0x21},
		Want: []byte{0xB9, 0xB6, 0x98, 0x9A, 0x93, 0xF7, 0xFF, 0x8B},
	}
	iv := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	res, err := c.CalculateMAC(d.Key, d.Data, iv)
	if err != nil {
		t.Error("failed:" + err.Error())
	}
	src := fmt.Sprintf("%X", res)
	dst := fmt.Sprintf("%X", d.Want)
	if src != dst {
		t.Errorf("failed res(%s) expect(%s)\n", src, dst)
	}
}
